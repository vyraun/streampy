{\rtf1\ansi\ansicpg1252\cocoartf1265\cocoasubrtf200
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
\paperw11900\paperh16840\margl1440\margr1440\vieww16880\viewh11880\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural

\f0\fs24 \cf0 \

\b Aim:
\b0  Solve streaming contextual bandit problems\
\

\b Stack:
\b0  Python / Redis (for storage) / Flask (for API)\
\

\b Definitions of objects:
\b0 \
Context = context (whichever encodes the experiment, the page, the user, etc)\
Param = parameters (paramours which are updated during the stream and used for decisions\
Action = set of actions that are possible\
Reward = Pay of of action give the context\
\
\

\b Calls:
\b0 \
getAction(Context)  						Context	|=>	Action\
updateParams(Reward, Action, Context)		\{triple\}	|=>	Params\
\
\

\b Example: A/B test of length N (and pseudo code)
\b0 \
\
Context = \{experimentID = XXX, \'85\}					# Only the experimentID is necessary\
Action = \{A, B\}									# Can be retrieved from ExperimentID\
Params = \{n=4, nA=2, nB=2, sA=1, sB=1, N=10000\}  	# Includes Laplace Smoothing\
Reward = \{0, 1\}\
\
getAction(Context):\
	getParams(experimentID)\
	if n < N \{\
		math.rand(A,B)\
	\} else \{\
		which.max\{sA / nA, sB / nB\}\
	\}\
\
updateParams(Reward, Advice, \{Context\} ):   			## if the advice contains an ID the context could be retrieved\'85\
	getParams(experimentID)\
	if (Advice == A)\{\
		nA++\
		sA + Reward\
	\} else \{\
		nB++\
		sB + Reward\
	\}\
	n++\
	setParams(experimentID)\
\
\
So, this is an example of a very bad solution to a very simple bandit problem.\
\
\
\

\b So, more abstract:\

\b0 \
getAction(Context):\
	Retrieve parameters of experiment\
		(if \'93require\'94 is specified than only retrieve the required parameters)\
	Retrieve advice logic\
		Compute advice based on Context\
	Return Advice\
\
updateParams(..):\
	Retrieve Parameters\
	Retrieve update logic\
	Update the parameters based on the Advice, the Context, and the Reward\
	Stop.\
\
The retrieval of the logic parts should be dynamic and allows for implementation of all kinds of streaming contextual bandit solutions.\
\
\
\

\b Databases / sets:
\b0 \
- Params per experiment\
	experiment\{\
		actions\{\}   		# Denotes the possible actions\
		params\{\}		# Parameters to be tracked. Can be dynamic. And should not always all be retrieved (.e.g in the case of user, add, page, etc. dependent parameters often only require the parameters that are actually updated)\
		logic\{\}		# States which 2 pieces of logic to use. Can be dynamic, and we offer a number of presets. (And, PersuasioAPI could be a proprietary algorithm)\
	\}\
\
- Log files (log all calls)\
\
\
* Each \'93algorithm\'94 is composed of two pieces of logic, one for generating advices (e.g. beta draw in current PersuasionAPI implementation) and an update parameter\
\
* We might need to consider security: how do we make sure that only those who have the experimentID can actually make calls?\
\
* We could create standard parameters: e.g. a streaming mean object contains sum x and sum n, but can be instantiated in one go. This would simplify the AB test code to:\
A = mean A\
B = mean B\
A = updateMean(A,x)			# A is a mean object and contains A$n and A$x\
\
\
\

\b - Possible uses:\

\b0 Persuasion profiling:\
	Action = \{Strategy 1, Strategy 2, \'85\}\
	Params = \{ns, ss, ns[j=1, \'85 j=J], ss[j=1, \'85 j=J\}\
	Context = User j\
	Reward = \{0,1\}\
\
Online linear regression\
	Action = \{NULL\}\
	Params = A (matrix), b (vector)\
	Context = feature vector\
	Reward = dependent variable\
\
Similar: Online SGD\
\
AB thompson bootstrap\
	Action = \{A, B\}\
	Params = \{nA[k=1, \'85 k=K], sA[k=1, \'85 k=K], nB[k=1, \'85 k=K], sB[k=1, \'85 k=K]\}\
	Context = NULL\
	Reward = \{0,1\}\
\
}